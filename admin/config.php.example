<?php
// Configuration de la base de données
define('DB_HOST', 'localhost');
define('DB_NAME', 'lydia_cms');
define('DB_USER', 'root');
define('DB_PASS', 'votre_mot_de_passe'); // Changez selon votre configuration
define('DB_PORT', '3306'); // Port MySQL standard (8889 pour MAMP)

// Configuration de sécurité
define('SESSION_TIMEOUT', 3600); // 1 heure
define('MAX_LOGIN_ATTEMPTS', 5);
define('LOCKOUT_TIME', 900); // 15 minutes

// Clé secrète pour les tokens CSRF - CHANGEZ CETTE VALEUR !
define('CSRF_SECRET', 'changez_cette_cle_secrete_' . bin2hex(random_bytes(16)));

// Configuration du site - Adaptez selon votre environnement
define('SITE_URL', 'http://localhost/lydiav2/');
define('ADMIN_URL', 'http://localhost/lydiav2/admin/');

// Timezone
date_default_timezone_set('Europe/Paris');

// Configuration des erreurs (désactivez en production)
ini_set('display_errors', 1);
error_reporting(E_ALL);

// Démarrage de la session sécurisée
if (session_status() === PHP_SESSION_NONE) {
    session_start([
        'cookie_lifetime' => SESSION_TIMEOUT,
        'cookie_secure' => false, // true en HTTPS
        'cookie_httponly' => true,
        'cookie_samesite' => 'Strict'
    ]);
}

// Connexion à la base de données avec PDO
try {
    $dsn = "mysql:host=" . DB_HOST . ";port=" . DB_PORT . ";dbname=" . DB_NAME . ";charset=utf8mb4";
    $pdo = new PDO($dsn, DB_USER, DB_PASS, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES => false
    ]);
} catch (PDOException $e) {
    die("Erreur de connexion à la base de données : " . $e->getMessage());
}

// Fonctions de sécurité
function generateCSRFToken() {
    if (!isset($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }
    return $_SESSION['csrf_token'];
}

function verifyCSRFToken($token) {
    return isset($_SESSION['csrf_token']) && hash_equals($_SESSION['csrf_token'], $token);
}

function sanitize($input) {
    if (is_array($input)) {
        return array_map('sanitize', $input);
    }
    return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
}

function requireLogin() {
    if (!isset($_SESSION['admin_logged_in']) || $_SESSION['admin_logged_in'] !== true) {
        header('Location: login.php');
        exit;
    }
    
    // Vérification du timeout de session
    if (isset($_SESSION['last_activity']) && 
        (time() - $_SESSION['last_activity'] > SESSION_TIMEOUT)) {
        session_destroy();
        header('Location: login.php?timeout=1');
        exit;
    }
    
    $_SESSION['last_activity'] = time();
}

// Fonctions de gestion des données
function saveSectionData($sectionName, $data) {
    global $pdo;
    try {
        // Créer la table si elle n'existe pas
        $pdo->exec("
            CREATE TABLE IF NOT EXISTS sections (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(50) NOT NULL UNIQUE,
                data JSON NOT NULL,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
        ");
        
        $stmt = $pdo->prepare("
            INSERT INTO sections (name, data) VALUES (?, ?)
            ON DUPLICATE KEY UPDATE data = VALUES(data)
        ");
        
        return $stmt->execute([$sectionName, json_encode($data, JSON_UNESCAPED_UNICODE)]);
    } catch (Exception $e) {
        error_log("Erreur sauvegarde section: " . $e->getMessage());
        return false;
    }
}

function getSectionData($sectionName) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("SELECT data FROM sections WHERE name = ?");
        $stmt->execute([$sectionName]);
        $result = $stmt->fetchColumn();
        
        return $result ? json_decode($result, true) : [];
    } catch (Exception $e) {
        error_log("Erreur récupération section: " . $e->getMessage());
        return [];
    }
}

function saveSetting($key, $value) {
    global $pdo;
    try {
        // Créer la table si elle n'existe pas
        $pdo->exec("
            CREATE TABLE IF NOT EXISTS settings (
                id INT AUTO_INCREMENT PRIMARY KEY,
                setting_key VARCHAR(100) NOT NULL UNIQUE,
                setting_value TEXT NOT NULL,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
        ");
        
        $stmt = $pdo->prepare("
            INSERT INTO settings (setting_key, setting_value) VALUES (?, ?)
            ON DUPLICATE KEY UPDATE setting_value = VALUES(setting_value)
        ");
        
        return $stmt->execute([$key, $value]);
    } catch (Exception $e) {
        error_log("Erreur sauvegarde paramètre: " . $e->getMessage());
        return false;
    }
}

function getSetting($key, $default = '') {
    global $pdo;
    try {
        $stmt = $pdo->prepare("SELECT setting_value FROM settings WHERE setting_key = ?");
        $stmt->execute([$key]);
        $result = $stmt->fetchColumn();
        
        return $result !== false ? $result : $default;
    } catch (Exception $e) {
        error_log("Erreur récupération paramètre: " . $e->getMessage());
        return $default;
    }
}
?>
